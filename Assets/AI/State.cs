// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

// enum which specifies how positively or negatively close an enemy is to the player
public enum XCloseness {
	Small,
	Medium,
	Far
}

public enum YCloseness {
	PosSmall,
	PosMedium,
	PosFar,
	NegSmall,
	NegMedium,
	NegFar
}

// class which takes in a world and creates a simplified state
public class State {

	// State Properties
	public PowerupType Weapon;
	public int	AmmoAmount;
	public PowerupType EnemyWeapon;
	public int EnemyAmmoAmount;
	public Closeness XDistanceToEnemy;
	public Closeness YDistanceToEnemy;
	
	// initialization method that simplifies a world into a state
	public State (World world, int playerNum) {

		World.Player player;
		World.Player enemy;

		// set the player and enemy
		if (playerNum == 1) {
			player = world.Player1;
			enemy = world.Player2;
		}
		else {
			player = world.Player2;
			enemy = world.Player1;
		}

		// set the player and enemy weapons and ammo amounts
		weapon = player.Weapon;
		ammoAmount = player.Ammo;
		enemyWeapon = enemy.Weapon;
		enemyAmmoAmount = enemy.Ammo;

		// calculate the x and y distance to the enemy
		float xDist = enemy.X - player.X;
		float yDist = enemy.Y - player.Y;

		// convert these distances into closeness types
		xDistanceToEnemy = HowClose (xDist);
		yDistanceToEnemy = HowClose (yDist);
	}

	// returns all possible states
	static public List<State> AllPossible () {

		// create empty list
		List<State> stateList = new List<State>();

		// iterate through each property
		WeaponType[] weaponArray = new WeaponType[] {
			WeaponType.None,
			WeaponType.Bombs,
			WeaponType.Rockets,
			WeaponType.Minions,
			WeaponType.Lightning
		};

		int[] ammoArray = new int[]{-1,0,1,2,3};

		Closeness[] closenessArray = new Closeness[] { 
			Closeness.PosSmall,
			Closeness.PosMedium,
			Closeness.PosFar,
			Closeness.NegSmall,
			Closeness.NegMedium,
			Closeness.NegFar
		};

		// weapon
		foreach (WeaponType tempWeapon in weaponArray) {

			// ammoAmount
			foreach (int tempAmmoAmount in ammoArray) {

				// enemyWeapon
				foreach (WeaponType tempEnemyWeapon in weaponArray) {

					// enemyAmmoAmount
					foreach (int tempEnemyAmmoAmount in ammoArray) {

						// xDistanceToEnemy
						foreach (Closeness tempXDistanceToEnemy in closenessArray) {

							// yDistanceToEnemy
							foreach (Closeness tempYDistanceToEnemy in closenessArray) {

								// create new state class with the above properties
								State newState = new State ();
								newState.weapon = tempWeapon;
								newState.ammoAmount = tempAmmoAmount;
								newState.enemyWeapon = tempEnemyWeapon;
								newState.enemyAmmoAmount = tempEnemyAmmoAmount;
								newState.xDistanceToEnemy = tempXDistanceToEnemy;
								newState.yDistanceToEnemy = tempYDistanceToEnemy;

								// add newState to stateList
								stateList.Add (newState);
							}
						}
					}
				}
			}
		}

		return stateList;
	}

	// helper method which takes in a distance and returns how a closeness type
	Closeness HowClose (float dist) {

		if (dist >= 0) {
			if (0 <= dist < 2) {
				return Closeness.PosSmall;
			} else if (2 <= dist < 8) {
				return Closeness.PosMedium;
			} else {
				return Closeness.PosFar;
			}
		} else {
			if (0 <= dist < 2) {
				return Closeness.NegSmall;
			} else if (2 <= dist < 8) {
				return Closeness.NegMedium;
			} else {
				return Closeness.NegFar;
			}
		}
	}
}

