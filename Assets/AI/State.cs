// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

// enum which specifies how positively or negatively close an enemy is to the player
public enum Closeness {
	PosSmall,
	PosMedium,
	PosFar,
	NegSmall,
	NegMedium,
	NegFar
}

// class which takes in a world and creates a simplified state
public class State {

	// State Properties
	public PowerupType weapon;
	public int	ammoAmount;
	public PowerupType enemyWeapon;
	public int enemyAmmoAmount;
	public Closeness xDistanceToEnemy;
	public Closeness yDistanceToEnemy;
	
	// initialization method that simplifies a world into a state
	public State (World world, int playerNum) {

		World.Player player;
		World.Player enemy;

		// set the player and enemy
		if (playerNum == 1) {
			player = world.Player1;
			enemy = world.Player2;
		}
		else {
			player = world.Player2;
			enemy = world.Player1;
		}

		// set the player and enemy weapons and ammo amounts
		weapon = player.Weapon;
		ammoAmount = player.Ammo;
		enemyWeapon = enemy.Weapon;
		enemyAmmoAmount = enemy.Ammo;

		// calculate the x and y distance to the enemy
		float xDist = enemy.X - player.X;
		float yDist = enemy.Y - player.Y;

		// convert these distances into closeness types
		xDistanceToEnemy = HowClose (xDist);
		yDistanceToEnemy = HowClose (yDist);
	}

	// returns all possible states
	public List<State> allPossible () {

	}

	// helper method which takes in a distance and returns how a closeness type
	Closeness HowClose (float dist) {

		if (dist >= 0) {
			if (0 <= dist < 2) {
				return Closeness.PosSmall;
			} else if (2 <= dist < 8) {
				return Closeness.PosMedium;
			} else {
				return Closeness.PosFar;
			}
		} else {
			if (0 <= dist < 2) {
				return Closeness.NegSmall;
			} else if (2 <= dist < 8) {
				return Closeness.NegMedium;
			} else {
				return Closeness.NegFar;
			}
		}
	}
}

